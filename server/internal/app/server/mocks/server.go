// Code generated by MockGen. DO NOT EDIT.
// Source: ./server.go

// Package mock_server is a generated GoMock package.
package mock_server

import (
	context "context"
	"homework-5/server/internal/app/group"
	"homework-5/server/internal/app/student"
	http "net/http"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockServer is a mock of Server interface.
type MockServer struct {
	ctrl     *gomock.Controller
	recorder *MockServerMockRecorder
}

// MockServerMockRecorder is the mock recorder for MockServer.
type MockServerMockRecorder struct {
	mock *MockServer
}

// NewMockServer creates a new mock instance.
func NewMockServer(ctrl *gomock.Controller) *MockServer {
	mock := &MockServer{ctrl: ctrl}
	mock.recorder = &MockServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockServer) EXPECT() *MockServerMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *MockServer) Delete(r *http.Request) ([]byte, int) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", r)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(int)
	return ret0, ret1
}

// Delete indicates an expected call of Delete.
func (mr *MockServerMockRecorder) Delete(r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockServer)(nil).Delete), r)
}

// Get mocks base method.
func (m *MockServer) Get(r *http.Request) ([]byte, int) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", r)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(int)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockServerMockRecorder) Get(r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockServer)(nil).Get), r)
}

// Handle mocks base method.
func (m *MockServer) Handle(w http.ResponseWriter, r *http.Request) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Handle", w, r)
}

// Handle indicates an expected call of Handle.
func (mr *MockServerMockRecorder) Handle(w, r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Handle", reflect.TypeOf((*MockServer)(nil).Handle), w, r)
}

// Post mocks base method.
func (m *MockServer) Post(r *http.Request) ([]byte, int) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Post", r)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(int)
	return ret0, ret1
}

// Post indicates an expected call of Post.
func (mr *MockServerMockRecorder) Post(r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Post", reflect.TypeOf((*MockServer)(nil).Post), r)
}

// Put mocks base method.
func (m *MockServer) Put(r *http.Request) ([]byte, int) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Put", r)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(int)
	return ret0, ret1
}

// Put indicates an expected call of Put.
func (mr *MockServerMockRecorder) Put(r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Put", reflect.TypeOf((*MockServer)(nil).Put), r)
}

// MockGroupsRepository is a mock of GroupsRepository interface.
type MockGroupsRepository struct {
	ctrl     *gomock.Controller
	recorder *MockGroupsRepositoryMockRecorder
}

// MockGroupsRepositoryMockRecorder is the mock recorder for MockGroupsRepository.
type MockGroupsRepositoryMockRecorder struct {
	mock *MockGroupsRepository
}

// NewMockGroupsRepository creates a new mock instance.
func NewMockGroupsRepository(ctrl *gomock.Controller) *MockGroupsRepository {
	mock := &MockGroupsRepository{ctrl: ctrl}
	mock.recorder = &MockGroupsRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGroupsRepository) EXPECT() *MockGroupsRepositoryMockRecorder {
	return m.recorder
}

// Add mocks base method.
func (m *MockGroupsRepository) Add(ctx context.Context, group *group.Group) (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Add", ctx, group)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Add indicates an expected call of Add.
func (mr *MockGroupsRepositoryMockRecorder) Add(ctx, group interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*MockGroupsRepository)(nil).Add), ctx, group)
}

// GetById mocks base method.
func (m *MockGroupsRepository) GetById(ctx context.Context, id uint64) (*group.Group, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetById", ctx, id)
	ret0, _ := ret[0].(*group.Group)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetById indicates an expected call of GetById.
func (mr *MockGroupsRepositoryMockRecorder) GetById(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetById", reflect.TypeOf((*MockGroupsRepository)(nil).GetById), ctx, id)
}

// Remove mocks base method.
func (m *MockGroupsRepository) Remove(ctx context.Context, id uint64) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Remove", ctx, id)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Remove indicates an expected call of Remove.
func (mr *MockGroupsRepositoryMockRecorder) Remove(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Remove", reflect.TypeOf((*MockGroupsRepository)(nil).Remove), ctx, id)
}

// UpdateById mocks base method.
func (m *MockGroupsRepository) UpdateById(ctx context.Context, id uint64, group *group.Group) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateById", ctx, id, group)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateById indicates an expected call of UpdateById.
func (mr *MockGroupsRepositoryMockRecorder) UpdateById(ctx, id, group interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateById", reflect.TypeOf((*MockGroupsRepository)(nil).UpdateById), ctx, id, group)
}

// MockStudentsRepository is a mock of StudentsRepository interface.
type MockStudentsRepository struct {
	ctrl     *gomock.Controller
	recorder *MockStudentsRepositoryMockRecorder
}

// MockStudentsRepositoryMockRecorder is the mock recorder for MockStudentsRepository.
type MockStudentsRepositoryMockRecorder struct {
	mock *MockStudentsRepository
}

// NewMockStudentsRepository creates a new mock instance.
func NewMockStudentsRepository(ctrl *gomock.Controller) *MockStudentsRepository {
	mock := &MockStudentsRepository{ctrl: ctrl}
	mock.recorder = &MockStudentsRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStudentsRepository) EXPECT() *MockStudentsRepositoryMockRecorder {
	return m.recorder
}

// Add mocks base method.
func (m *MockStudentsRepository) Add(ctx context.Context, student *student.Student) (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Add", ctx, student)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Add indicates an expected call of Add.
func (mr *MockStudentsRepositoryMockRecorder) Add(ctx, student interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*MockStudentsRepository)(nil).Add), ctx, student)
}

// GetById mocks base method.
func (m *MockStudentsRepository) GetById(ctx context.Context, id uint64) (*student.Student, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetById", ctx, id)
	ret0, _ := ret[0].(*student.Student)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetById indicates an expected call of GetById.
func (mr *MockStudentsRepositoryMockRecorder) GetById(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetById", reflect.TypeOf((*MockStudentsRepository)(nil).GetById), ctx, id)
}

// Remove mocks base method.
func (m *MockStudentsRepository) Remove(ctx context.Context, id uint64) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Remove", ctx, id)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Remove indicates an expected call of Remove.
func (mr *MockStudentsRepositoryMockRecorder) Remove(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Remove", reflect.TypeOf((*MockStudentsRepository)(nil).Remove), ctx, id)
}

// UpdateById mocks base method.
func (m *MockStudentsRepository) UpdateById(ctx context.Context, id uint64, student *student.Student) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateById", ctx, id, student)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateById indicates an expected call of UpdateById.
func (mr *MockStudentsRepositoryMockRecorder) UpdateById(ctx, id, student interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateById", reflect.TypeOf((*MockStudentsRepository)(nil).UpdateById), ctx, id, student)
}
